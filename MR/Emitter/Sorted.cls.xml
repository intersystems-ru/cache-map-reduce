<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MR.Emitter.Sorted">
<Description>
Emitter which sorts by keys all emitted pairs or tuples (key, value(s))</Description>
<Super>MR.Emitter.Ordered</Super>
<TimeCreated>63677,7918.466708</TimeCreated>

<Property name="AutoIncrement">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="Emit">
<Description>
emit $listbuild(key,value)</Description>
<FormalSpec>ListBuild:%String</FormalSpec>
<Implementation><![CDATA[
    $$$ThrowOnError($listvalid(ListBuild))
    #dim name As %String = ..GlobalName
    #dim key As %String
    if $listlength(ListBuild)=1 {
        // special case - only key name given, no value
        set key = $li(ListBuild)
        if ..AutoIncrement {
            #dim dummyX As %Integer = $increment(@name@(key)) ; $seq is non-deterministic
        } else {
            set @name@(key) = 1
        }
    } else {
        #dim value As %String = $li(ListBuild,*)
        set ListBuild = $li(ListBuild,1,*-1)
        #dim globalName = name_"("_$lts(ListBuild)_")"
        if ..AutoIncrement {
            #dim dummyY As %Integer = $increment(@globalName,value)
        } else {
            set @globalName = value
        }
    }
]]></Implementation>
</Method>

<Method name="GetNext">
<Description>
returns emitted $lb(key,value)</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    #dim name As %String = ..GlobalName
    #dim value As %String
    #dim ref As %String = $query(@name,1,value)
    if ref'="" {
        zkill @ref
        #dim i As %Integer
        #dim refLen As %Integer = $qlength(ref)
        #dim baseLen As %Integer = $qlength(name)
        #dim listbuild = ""
        for i=baseLen+1:1:refLen {
            set $li(listbuild,i-baseLen)=$qs(ref,i)
        }
        set $li(listbuild,*+1)=value

        quit listbuild
    }

    quit ""
]]></Implementation>
</Method>

<Method name="Debug">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
#if 1
    set e=..%New("^||emitterS")
    do e.Emit($lb(1,2,3))
    do e.Emit($lb(1,2,5))
    do e.Emit($lb(1,2,4))
#endif
]]></Implementation>
</Method>
</Class>
</Export>
